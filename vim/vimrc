set nocompatible                          " Make Vim more useful

" Using pathogen for package management
execute pathogen#infect()
call pathogen#helptags()

" Theme Settings {{{
let g:solarized_termtrans=1
let g:solarized_termcolors=16
let g:solarized_visibility="low"
colorscheme solarized                     " Other options: pablo
set background=dark                       " Dark background
syntax on                                 " Syntax highlighting
" }}}

" General Settings {{{
" Spacing settings
set autoindent                            " Autoindent
set expandtab                             " Tabs are spaces
filetype plugin indent on                 " Load filetype-specific indent files
set nocompatible                          " Make Vim more useful
set clipboard=unnamed                     " use OS clipboard
set list listchars=tab:»·,trail:·
set tabstop=2 shiftwidth=2 softtabstop=2  " Default tabwidth

" Search config
set ignorecase                            " Ignore case of searches
set incsearch                             " Dynamic highlighting
set gdefault                              " Default global search flag
set wrapscan                              " Wrap search around the file
highlight IncSearch ctermfg=15 cterm=bold,underline term=standout
highlight Search term=standout cterm=NONE ctermfg=15 ctermbg=NONE

" Folding config
set foldenable
set foldlevelstart=10                     " Opens most folds by default
set foldnestmax=4                         " 4 nested fold max
set foldmethod=syntax                     " Folding based on file syntax

set wildmenu                              " Better command-line completion
set lazyredraw                            " Faster rendering command options
set ttyfast                               " Faster terminal connections
set noeol                                 " Don’t add empty line at end of file
set showcmd                               " Show partial command as being typed
set ruler                                 " Show line & column number of cursor
set shortmess=atI                         " Skip intro message when starting Vim
set nostartofline                         " Don't reset cursor to start of line
set cursorline                            " Highlight current cursor line
set showmode                              " Show current mode
set title                                 " Show filename in titlebar
set showmatch                             " Highlight matching parenthesis
set scrolloff=3                           " Scroll 3 lines before window border
set number                                " Line number settings
highlight LineNr cterm=NONE ctermbg=NONE

" Buffer Settings
set hidden

" Close NERDTree when the last file closes
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
      \ b:NERDTree.isTabTree()) | q | endif
set modelines=1                           " Last line (comment) reserved to file
                                          " specific vim actions
" }}}

" Backup Settings {{{
" Centralize backups, swapfiles & undo history. Make directories if not present
if !isdirectory(expand("~/.vim/backupdir/"))
  silent !mkdir -p ~/.vim/backupdir
endif
if !isdirectory(expand("~/.vim/swap/"))
  silent !mkdir -p ~/.vim/swap
endif
if !isdirectory(expand("~/.vim/undo/"))
  silent !mkdir -p ~/.vim/undo
endif

set backupdir^=~/.vim/backup/              " Directory to put backup files
set directory^=~/.vim/swap/                " Directory to put swap files
set undodir^=~/.vim/undo/                  " Directory to put undo files
set backupskip=/tmp/*,/private/tmp/*       " Skip backup if in these directories
set writebackup
" }}}

" Plugin Settings {{{
" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
let g:ctrlp_working_path_mode = 0
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \}

" Use nearest .git dir
let g:ctrlp_working_path_mode = 'r'

" Airline settings, theme: solarized
set t_Co=256
let g:airline_powerline_fonts=1
let g:airline_theme='solarized'           " Options: lucius, base16
set laststatus=2                          " To show status bar on startup
" }}}

" Key Mappings {{{
" Quicker exit from insert mode
imap jk <Esc>

" Move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap J gj
nnoremap K gk

" Change mapleader
let mapleader=","

" Space opens/closes folds
nnoremap <space> za
" Super undo: ,u
nnoremap <leader>u :GundoToggle<CR>
" Highlight last inserted text
nnoremap hi `[v`]

" Edit .vimrc/.zshrc and load .vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Save session/current assortment of windows so they're there next time you
" open Vim. Reopen saved session by running vim -S
nnoremap <leader>s :mksession<CR>
" Silver searcher shortcut, ag.vim plugin
nnoremap <leader>a :Ag

" Force yourself to use hjkl
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Smooth scrolling
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>

" Open NERDTree with ctrl+N
map <C-n> :NERDTreeToggle %<CR>

" Map Ctrl+V to paste in Insert mode
imap <C-V> <C-R>*
" Map Ctrl+C to copy in Visual mode
vmap <C-C> "+y
" Add paste shortcut
nmap <C-V> "+p
" Paste toggle to something easy
set pastetoggle=tp
" }}}

" Functions (& mappings) {{{
" Toggle number view (tn)
function! ToggleNumber()
  if(&number == 1)
    set nonumber
  else
    set number
 endif
endfunc
noremap tn :call ToggleNumber()<CR>

" Toggle relative number view (tr)
function! ToggleRelativeNumber()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
 endif
endfunc
noremap tr :call ToggleRelativeNumber()<CR>

" Toggle highlight search (ths)
function! ToggleHighlightSearch()
  if(&hlsearch == 1)
    set nohls
  else
    set hls
  endif
endfunction
nnoremap ths :call ToggleHighlightSearch()<CR>

" Function for toggling over length highlighting (tol)
function! ToggleOverLengthIndicator()
    if g:over_length_hl_enabled
        highlight OverLength ctermbg=NONE ctermfg=NONE cterm=NONE
        let g:over_length_hl_enabled = 0
    else
        highlight OverLength ctermbg=NONE ctermfg=red cterm=bold
        let g:over_length_hl_enabled = 1
    endif
endfunction
let g:over_length_hl_enabled = 0
highlight OverLength ctermbg=NONE ctermfg=NONE cterm=NONE
match OverLength /\%81v.\+/
nnoremap tol :call ToggleOverLengthIndicator()<CR>

function! ToggleFold()
  if(&foldlevel == 0)
    set foldlevel=99
  else
    set foldlevel=0
 endif
endfunc
noremap t<space> :call ToggleFold()<CR>


" Change to directory of current file, window specific (,cd)
function! LocallyChangeCurrentDirectory()
  lcd %:p:h
endfunction
nnoremap <leader>lcd :call LocallyChangeCurrentDirectory()<CR>

" Change to directory of current file, window specific (,cd)
function! ChangeCurrentDirectory()
  cd %:p:h
endfunction
nnoremap <leader>cd :call ChangeCurrentDirectory()<CR>

" Strip trailing white space (sws)
function! StripWhiteSpace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
nnoremap sws :call StripWhiteSpace()<CR>
" }}}

" vim:foldmethod=marker:foldlevel=0
